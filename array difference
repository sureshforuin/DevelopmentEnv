const a = [{ a: "apple", b: "ball", config: { debug: true } }];
const b = [{ a: "apple", b: "ball", config: { debug: false } }];

// Deep equality checker
function deepEqual(obj1, obj2) {
  if (obj1 === obj2) return true;

  if (
    typeof obj1 !== "object" || obj1 === null ||
    typeof obj2 !== "object" || obj2 === null
  ) return false;

  const keys1 = Object.keys(obj1);
  const keys2 = Object.keys(obj2);
  if (keys1.length !== keys2.length) return false;

  return keys1.every(key => deepEqual(obj1[key], obj2[key]));
}

// Compare and mark changes
const result = b.map((itemB, index) => {
  const itemA = a[index];
  const changed = !deepEqual(itemA, itemB);
  return changed ? { ...itemB, changed: true } : itemB;
});

console.log(result);


const calculateNewDayTime = (day, timeStr) => {
    const [hour, minute] = timeStr.split(":").map(Number);

    // Base reference: assume T is today
    let baseDate = moment().startOf("day");
    if (day === "T-1") baseDate.subtract(1, "day");
    if (day === "T+1") baseDate.add(1, "day");

    const startTime = baseDate.clone().set({ hour, minute, second: 0 });

    // Add 23:59 to time
    const endTime = startTime.clone().add(23, "hours").add(59, "minutes");

    // Determine day diff
    const dayDiff = endTime.startOf("day").diff(startTime.startOf("day"), "days");

    const newDay =
      day === "T-1" && dayDiff === 0 ? "T-1"
      : day === "T-1" && dayDiff === 1 ? "T"
      : day === "T" && dayDiff === 0 ? "T"
      : day === "T" && dayDiff === 1 ? "T+1"
      : day; // fallback for T+1 or others

    const newTime = endTime.format("HH:mm");
    return `${newDay} ${newTime}`;
  };

  const handleCalculate = () => {
    const output = calculateNewDayTime(selectedDay, selectedTime);
    setResult(output);
  };
