import React, { useState } from "react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";

const months = [
  "Jan", "Feb", "Mar", "Apr",
  "May", "Jun", "Jul", "Aug",
  "Sep", "Oct", "Nov", "Dec"
];

export default function SmartCustomDatePicker() {
  const [selectedDate, setSelectedDate] = useState(new Date());

  // New internal states
  const [view, setView] = useState("date"); // 'date', 'month', 'year'
  const [internalYear, setInternalYear] = useState(selectedDate.getFullYear());
  const [internalMonth, setInternalMonth] = useState(selectedDate.getMonth());

  const handleDaySelect = (date) => {
    const finalDate = new Date(date);
    finalDate.setFullYear(internalYear);
    finalDate.setMonth(internalMonth);
    setSelectedDate(finalDate);
    setView("date");
  };

  const renderHeader = ({ date }) => {
    const startYear = Math.floor(internalYear / 9) * 9;
    const years = [...Array(9)].map((_, i) => startYear + i);

    return (
      <div style={{ textAlign: "center", padding: 10 }}>
        {view === "date" && (
          <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
            <button onClick={() => {
              const prev = new Date(internalYear, internalMonth - 1);
              setInternalMonth(prev.getMonth());
              setInternalYear(prev.getFullYear());
            }}>‹</button>

            <div>
              <span
                onClick={() => setView("month")}
                style={{ cursor: "pointer", fontWeight: "bold", marginRight: 8 }}
              >
                {months[internalMonth]}
              </span>
              <span
                onClick={() => setView("year")}
                style={{ cursor: "pointer", fontWeight: "bold" }}
              >
                {internalYear}
              </span>
            </div>

            <button onClick={() => {
              const next = new Date(internalYear, internalMonth + 1);
              setInternalMonth(next.getMonth());
              setInternalYear(next.getFullYear());
            }}>›</button>
          </div>
        )}

        {view === "month" && (
          <>
            <div style={{ marginBottom: 10 }}>
              <button onClick={() => setView("date")}>← Back</button>
            </div>
            <div style={{
              display: "grid",
              gridTemplateColumns: "repeat(3, 1fr)",
              gap: "6px"
            }}>
              {months.map((month, idx) => (
                <div
                  key={month}
                  style={{
                    cursor: "pointer",
                    padding: "6px",
                    backgroundColor: idx === internalMonth ? "#007bff" : "transparent",
                    color: idx === internalMonth ? "#fff" : "#000",
                    borderRadius: "4px"
                  }}
                  onClick={() => {
                    setInternalMonth(idx);
                    setView("date");
                  }}
                >
                  {month}
                </div>
              ))}
            </div>
          </>
        )}

        {view === "year" && (
          <>
            <div style={{ display: "flex", justifyContent: "space-between", marginBottom: 10 }}>
              <button onClick={() => setInternalYear(internalYear - 9)}>«</button>
              <span>{startYear} - {startYear + 8}</span>
              <button onClick={() => setInternalYear(internalYear + 9)}>»</button>
            </div>
            <div style={{
              display: "grid",
              gridTemplateColumns: "repeat(3, 1fr)",
              gap: "6px"
            }}>
              {years.map((year) => (
                <div
                  key={year}
                  style={{
                    cursor: "pointer",
                    padding: "6px",
                    backgroundColor: year === internalYear ? "#007bff" : "transparent",
                    color: year === internalYear ? "#fff" : "#000",
                    borderRadius: "4px"
                  }}
                  onClick={() => {
                    setInternalYear(year);
                    setView("date");
                  }}
                >
                  {year}
                </div>
              ))}
            </div>
          </>
        )}
      </div>
    );
  };

  return (
    <DatePicker
      selected={new Date(internalYear, internalMonth, selectedDate.getDate())}
      onChange={handleDaySelect}
      dateFormat="dd/MM/yyyy"
      renderCustomHeader={renderHeader}
      showPopperArrow={false}
    />
  );
}
